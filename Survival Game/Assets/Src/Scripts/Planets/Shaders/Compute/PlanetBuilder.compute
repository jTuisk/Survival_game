// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct SourceVertex 
{
	float3 pos;
	float2 uv;
};

StructuredBuffer<SourceVertex> _SourcVertices;
StructuredBuffer<int> _SourcIndices;

struct GeneratedVertex
{
	float3 pos;
	float3 normal;
	float2 uv;
};

RWStructuredBuffer<GeneratedVertex> _GeneratedVertices;
RWStructuredBuffer<int> _GeneratedIndices;

int _NumSourceTriangles;
float _PyramidHeight;
float4x4 _Transform;

SourceVertex Transform(SourceVertex v)
{
	SourceVertex sv;
	sv.pos = mul(_Transform, float4(v.pos, 1)).xyz;
	sv.uv = v.uv;

	return sv;
}

float3 CalculateTriangleNormal(float3 a, float3 b, float3 c)
{
	return normalize(cross(b-a, c -a));
}

GeneratedVertex MakeGeneratedVertex(SourceVertex sv, float3 normal)
{
	GeneratedVertex gv;
	gv.pos = sv.pos;
	gv.normal = normal;
	gv.uv = sv.uv;

	return gv;
}

void AddTriangle(int startIndex, SourceVertex a, SourceVertex b, SourceVertex c)
{
	float3 triangleNormal = CalculateTriangleNormal(a.pos, b.pos, c.pos);

	_GeneratedVertices[startIndex] = MakeGeneratedVertex(a, triangleNormal);
	_GeneratedVertices[startIndex + 1] = MakeGeneratedVertex(b, triangleNormal);
	_GeneratedVertices[startIndex + 2] = MakeGeneratedVertex(c, triangleNormal);

	_GeneratedIndices[startIndex] = startIndex;
	_GeneratedIndices[startIndex + 1] = startIndex + 1;
	_GeneratedIndices[startIndex + 2] = startIndex + 2;
}

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if((int)id.x >= _NumSourceTriangles)
		return;


	int triStart = id.x *3;
	SourceVertex a = Transform(_SourcVertices[_SourcIndices[triStart]]);
	SourceVertex b = Transform(_SourcVertices[_SourcIndices[triStart + 1]]);
	SourceVertex c = Transform(_SourcVertices[_SourcIndices[triStart + 2]]);

	float3 triNormal = CalculateTriangleNormal(a.pos, b.pos, c.pos);
	SourceVertex center;
	center.pos = (a.pos + b.pos + c.pos)/ 3 + triNormal * _PyramidHeight;
	center.uv = (a.uv + b.uv + c.uv)/3;

	int generatedStart = id.x * 3 * 3;
	AddTriangle(generatedStart, a, b, center);
	AddTriangle(generatedStart + 3, b, c, center);
	AddTriangle(generatedStart +6, c, a, center);

}
