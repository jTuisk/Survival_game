//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Src/Scripts/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerLand"",
            ""id"": ""3dd53029-98cc-4fe3-8885-4cf071d11cca"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""700087a1-0976-4330-8231-291b7931ae26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""5e377145-876e-427d-93c4-bb29ead28734"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""1e37d14f-3a24-450d-9297-8a52c2123a0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""14fc354d-a77a-4f8e-9dcf-aeade28fa407"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6e068ac8-6383-4faf-baec-9bcca9c973a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""dd076f9d-5a92-43e3-a06a-b2ff52220046"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""60596a0d-f7b2-4f4b-9c55-2a9bafe91db4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""5de43d72-59ab-41a0-a764-89d9246e89d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0422639a-e277-45d1-b933-df98b6a214cb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a8905b9c-a045-4aa1-bc8c-26f464c560bd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""91dcdfdd-81b9-4794-bff5-865c09384098"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""73ae3000-b825-4c9d-8130-61bacf2dfabc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c5cd7227-b54d-4e57-a362-920e6f8d2167"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d586778b-1ece-4bfd-8595-b15704a7a01d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.03,y=0.03)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcbd6617-5ff5-4a8d-a6df-3f58ff06096a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb31d998-04d8-4fff-8e2e-eb79a02a730b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffd1f11d-f8eb-462b-9b47-d89f408df06a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8179841-2054-43d1-812c-f9f898b6501b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fa4032b-4ac6-4532-af5b-f2cb5833ac41"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""651aaa81-6eb1-4a26-88c9-01a481f952d8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerLand
        m_PlayerLand = asset.FindActionMap("PlayerLand", throwIfNotFound: true);
        m_PlayerLand_Move = m_PlayerLand.FindAction("Move", throwIfNotFound: true);
        m_PlayerLand_Look = m_PlayerLand.FindAction("Look", throwIfNotFound: true);
        m_PlayerLand_Sprint = m_PlayerLand.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerLand_Jump = m_PlayerLand.FindAction("Jump", throwIfNotFound: true);
        m_PlayerLand_Pause = m_PlayerLand.FindAction("Pause", throwIfNotFound: true);
        m_PlayerLand_Crouch = m_PlayerLand.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerLand_Attack = m_PlayerLand.FindAction("Attack", throwIfNotFound: true);
        m_PlayerLand_Block = m_PlayerLand.FindAction("Block", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerLand
    private readonly InputActionMap m_PlayerLand;
    private IPlayerLandActions m_PlayerLandActionsCallbackInterface;
    private readonly InputAction m_PlayerLand_Move;
    private readonly InputAction m_PlayerLand_Look;
    private readonly InputAction m_PlayerLand_Sprint;
    private readonly InputAction m_PlayerLand_Jump;
    private readonly InputAction m_PlayerLand_Pause;
    private readonly InputAction m_PlayerLand_Crouch;
    private readonly InputAction m_PlayerLand_Attack;
    private readonly InputAction m_PlayerLand_Block;
    public struct PlayerLandActions
    {
        private @InputActions m_Wrapper;
        public PlayerLandActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerLand_Move;
        public InputAction @Look => m_Wrapper.m_PlayerLand_Look;
        public InputAction @Sprint => m_Wrapper.m_PlayerLand_Sprint;
        public InputAction @Jump => m_Wrapper.m_PlayerLand_Jump;
        public InputAction @Pause => m_Wrapper.m_PlayerLand_Pause;
        public InputAction @Crouch => m_Wrapper.m_PlayerLand_Crouch;
        public InputAction @Attack => m_Wrapper.m_PlayerLand_Attack;
        public InputAction @Block => m_Wrapper.m_PlayerLand_Block;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLandActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerLandActions instance)
        {
            if (m_Wrapper.m_PlayerLandActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnLook;
                @Sprint.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnSprint;
                @Jump.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnJump;
                @Pause.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnPause;
                @Crouch.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnCrouch;
                @Attack.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnAttack;
                @Block.started -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_PlayerLandActionsCallbackInterface.OnBlock;
            }
            m_Wrapper.m_PlayerLandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
            }
        }
    }
    public PlayerLandActions @PlayerLand => new PlayerLandActions(this);
    public interface IPlayerLandActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
    }
}
